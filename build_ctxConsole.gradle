/*
================================================================================
build_ctxConsole.gradle
GENERATED ONLY ONCE
USAGE:	 
	gradle  -b build_ctxConsole.gradle qawrapper
	gradlew  -b build_ctxConsole.gradle eclipse		//to set the dependency on the library
	gradlew -b build_ctxConsole.gradle build
	gradlew -b build_ctxConsole.gradle -q tasks --all
	gradlew -b build_ctxConsole.gradle cleanDistDir	//to clean the src directory
================================================================================
*/
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'java-library-distribution'
apply plugin: 'jacoco'

/*
--------------------------------------------------------------
PROPERTIES
--------------------------------------------------------------
*/
version = "1.0"
sourceCompatibility = "1.8"
ext{
	mainClassName = "it.unibo.ctxConsole.MainCtxConsole"
}
/*
--------------------------------------------------------------
DIRS
--------------------------------------------------------------
*/
sourceSets {
	main {
		java {
			srcDirs = ['src' , 'src-gen'  ]
		}
	}
	test {
		 java {
		   srcDirs = ['test']
		 }
	}
}
/*
--------------------------------------------------------------
DEPENDENCIES
--------------------------------------------------------------
*/
repositories {
      mavenCentral()
}
dependencies {
/*
BASIC SUPPORT (test, akka)
*/	
      testCompile 'junit:junit:4.12'
     // https://mvnrepository.com/artifact/com.typesafe.akka/akka-actor_2.11
	  compile group: 'com.typesafe.akka', name: 'akka-actor_2.11', version: '2.5.2'
	 // https://mvnrepository.com/artifact/com.typesafe.akka/akka-remote_2.11
	 compile group: 'com.typesafe.akka', name: 'akka-remote_2.11', version: '2.5.1'	 
     
/*
UNIBO SUPPORTS
*/		
	  compile fileTree(dir: '../libs/unibo', include: 'uniboInterfaces.jar')
	  compile fileTree(dir: '../libs/unibo', include: 'unibonoawtsupports.jar')
	  compile fileTree(dir: '../libs/unibo', include: 'uniboEnvBaseAwt.jar')
	  compile fileTree(dir: '../libs/unibo', include: '2p301.jar')
	  compile fileTree(dir: '../libs/unibo', include: 'qa18Akka.jar')
	  compile fileTree(dir: '../libs/http',  include: 'nanoHTTPD.jar')

/*
ADDED by the application designer for mindAI (planner)
*/
	// https://mvnrepository.com/artifact/com.googlecode.aima-java/aima-core
	compile group: 'com.googlecode.aima-java', name: 'aima-core', version: '3.0.0'

/*
COAP
*/
	// https://mvnrepository.com/artifact/org.eclipse.californium/californium-core
	compile group: 'org.eclipse.californium', name: 'californium-core', version: '2.0.0-M5'

/*
DDR ROBOT SAM
*/ 	 
	 //compile fileTree(dir: '../it.unibo.libs2018/libs/pi4j',  include: 'pi4j-core.jar')    //2-12 SNAPHOST non in gradle
	 //compile fileTree(dir: '../it.unibo.libs2018/libs/unibo', include: 'labbaseRobotSam.jar')
	 //compile fileTree(dir: '../it.unibo.libs2018/libs/unibo', include: 'uniboQactorRobot.jar') 
/*
ARDUINO
*/
	// https://mvnrepository.com/artifact/org.scream3r/jssc
	compile group: 'org.scream3r', name: 'jssc', version: '2.8.0'
/*
JSON
*/
	  
	  // https://mvnrepository.com/artifact/org.json/json
	  compile group: 'org.json', name: 'json', version: '20160810'
	  compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
/*
MQTT
*/
 	// https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3
	compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.1.0'

/*
BLUETOOTH
*/
	  //compile fileTree(dir: '../it.unibo.libs2018/libs/bth', include: 'bluecove-2.1.1-SNAPSHOT.jar')
	  //compile fileTree(dir: '../it.unibo.libs2018/libs/bth', include: 'bluecove-gpl-2.1.1-SNAPSHOT.jar')
/*
RXJAVA
*/
	//https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxjava
	//compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.0.6' 

/*
log pi4j
*/
	// https://mvnrepository.com/artifact/log4j/log4j
    //compile group: 'log4j', name: 'log4j', version: '1.2.16'

}

/*
--------------------------------------------------------------
AFTER TEST
--------------------------------------------------------------
*/
test {
    afterTest { desc, result -> 
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
/*
---------------------------------------------------------------------
JAR: incldes src-gen code (excluding Java) in the executable jar
---------------------------------------------------------------------
*/
jar {
   	from( 'src-gen' ){ include '**/*.*'	 exclude '**/*.java'  }
 	manifest {
 		attributes "Class-Path": '.  ' + configurations.compile.collect { "lib/"+it.getName() }.join(' ')
		attributes 'Main-Class': "$mainClassName"
	}
}
distributions {
    main{
        baseName = "$mainClassName"
    }
}
/*
---------------------------------------------------------
PREPARE DISTRIBUTION
---------------------------------------------------------
*/
task copyInfoForDist
copyInfoForDist.doLast{ 
	copy {
		from 'audio'
		into 'src/dist/audio/'
		include '**/*.*'
 	}
	copy { 
		from 'srcMore'
		into 'src/dist/srcMore/'
		include '**/*.*'
 	}
	copy { 
		from '.'
		into 'src/dist/'
		include '*.pl'
		include '*.html'
 	}
	copy {  
		from 'src'
		into 'src/dist/'
		include '*.qa'
		include '*.ddr'
		include '*.baseddr'
   	}
}

task cleanDistDir(type: Delete) {
	  delete 'src/dist'
}

jar.dependsOn copyInfoForDist
jar.finalizedBy cleanDistDir

/*
---------------------------------------------------------
TESTING
---------------------------------------------------------
*/
test {
	testLogging {
		outputs.upToDateWhen { false }		
		showStandardStreams = true		
		events 'failed' , 'passed' //,  'started', 'skipped', 		
	}
	
 	include '**/Test*.class'
	test.afterSuite { TestDescriptor suite, TestResult result -> //add closure to be notified
	if( !suite.parent && result.getTestCount() > 0) { //there is at least one test
		long elapsedTestTime = result.getEndTime() - result.getStartTime()
 		System.out.println("""AFTERTEST Elapsed time for execution of ${result.getTestCount()} test(s):  $elapsedTestTime ms""");
	}
	}
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
     reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml") //DEC2018
    }
}

//WRAPPER
task qawrapper(type: Wrapper) {
	gradleVersion = '5.0'
}
//qawrapper.finalizedBy cleanDistDir
