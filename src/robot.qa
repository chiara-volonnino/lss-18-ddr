System robot

/*
 * ---------------------------------------------------------------------------------
 * Environment
 * ---------------------------------------------------------------------------------
 */
Event environment: environment(X)													// X=ok|notok

Event temperature: temperature(X)													// X = temperature (c)

/*
 * ---------------------------------------------------------------------------------
 * Robot-adapter
 * ---------------------------------------------------------------------------------
 */
Dispatch robotAdapterAdd: robot(T,A)												// T=Type ; A=args
Dispatch robotAdapterCmd: robotCmd(M,T)												//M=w|a|s|d|h  T:(int) duration

Dispatch robotCmd: robotCmd(M)														//M=w|a|s|d|h

/*
 * ---------------------------------------------------------------------------------
 * Robot-one-cell-forward
 * ---------------------------------------------------------------------------------
 */
Dispatch collisionDispatch: obstacle(TARGET)
Dispatch obstacleNear: obstacleNear
Dispatch moveMsgCmd: moveMsgCmd(TF)  
Dispatch moveMsgCmdDone: moveMsgCmdDone(X) //X=cmd  
Dispatch moveMsgCmdObstacle: moveMsgCmdObstacle(X) //X=

/*
 * ---------------------------------------------------------------------------------
 * Robot-advanced
 * ---------------------------------------------------------------------------------
 */
Dispatch waitMoveCompleted   : waitMoveCompleted

/*
 * ---------------------------------------------------------------------------------
 * Planner
 * ---------------------------------------------------------------------------------
 */
Dispatch endAction     : endAction 

/*
 * Robot position
 */
Event robotSonar: robotSonar(distance(X))											// X = distance
Event robotSonarObstacle: obstacle(X)												// From robot virtual sonar obstacle; X = name
// Event robotSonarWall: sonar(SONAR, TARGET, DISTANCE)								// sonar fisico

/*
 * ---------------------------------------------------------------------------------
 * Mind
 * ---------------------------------------------------------------------------------
 */
Dispatch cmdStop: cmdStop
Dispatch cmdGoHome: cmdGoHome
Dispatch cmdExplore: cmdExplore
Dispatch cmdReachBomb: cmdReachBomb

Dispatch handleBag: handleBag(X)													// handling bag logic; X = action 
Dispatch bag: bag(picture(X))														// X=photo

Dispatch idleWhileRetrieving: idleWhileRetrieving
Dispatch idleWhileReturning: idleWhileReturning

/*
 * Robot position
 */
Dispatch robotHome: robotHome
Dispatch robotHomeAfterBomb: robotHomeAfterBomb

/*
 * ---------------------------------------------------------------------------------
 * Console
 * ---------------------------------------------------------------------------------
 */
Dispatch alert: alert
Dispatch bagStatus: bagStatus(X)													// X = bomb|bag
Dispatch stateUpdate: state(T, P)													// T = type ; P = payload ; T = temperature | map | robotMovement | robotState 
Dispatch map: map(M)																// M: map (json)

// GUI
Event frontendUserCmd: frontendUserCmd(X)											//from GUI to CONSOLE;  X=command
Event frontendRobotState: frontendRobotState(X)										//from CONSOLE to GUI;  X=state

//pubSubServer "tcp://broker.hivemq.com:1883"

Context ctxConsole ip [ host="192.168.137.1" port=8078 ]

Context ctxRobot ip [ host="192.168.137.2" port=8079 ]

// Handler sonar virtuale
EventHandler collisionevh for robotSonarObstacle -print  {   
 	forwardEvent onecellforward -m collisionDispatch
};

QActor world_observer context ctxConsole {
	
	Rules {
		// Impostazioni default:
		temperature(20).
		// Regole di valutazione:
		evaluateTemp :- temperature(X), eval(lt, X, 25).							// R-TempOk
		// Regola di valutazione complessiva:
		evaluateEnvironment :- evaluateTemp.
	}
	
	Plan init normal [
//		connectAsSubscriber "unibo/environment"
		javaRun it.unibo.utils.mqttUtil.connectAndSubscribe("unibo/environment")
	] switchTo doObserve
	
	Plan doObserve [
		[ !? evaluateEnvironment ] emit environment: environment(ok)
			else emit environment: environment(notok)
	] transition
		whenTime 1000 -> doObserve
		whenEvent temperature -> evaluateTemperature								// R-TempOk
		finally repeatPlan
	
	Plan evaluateTemperature [
		onEvent temperature: temperature(X) ->
			ReplaceRule temperature(_) with temperature(X);
		onEvent temperature: temperature(X) ->
			forward console -m stateUpdate: state(temperature, X)
	] switchTo doObserve
}

QActor robot_adapter context ctxRobot {

	Rules {
//		robotType("robotSerial", setuparg("/dev/ttyACM0")).
		robotType("robotSerial", setuparg("/dev/rfcomm0")).
		robotType("robotVirtual", setuparg("localhost,true")).
//		robotType("robotVirtual", setuparg("localhost,false")).
//		robotType("robotDemo", setuparg("")).
	}
	
	Plan init normal [
		println("Robot adapter init")
	] transition
		whenTime 100 -> initRobots
	
	Plan initRobots [
		[ ?? robotType(T, setuparg(A))] selfMsg robotAdapterAdd: robot(T,A)
	] transition
		whenTime 2000 -> doWork
		whenMsg robotAdapterAdd: robot(T,A) do javaRun it.unibo.robotadapter.allRobots.setUp(T,A)
		finally repeatPlan
	
	Plan doWork [
		
	] transition
		stopAfter 6000000
		whenMsg robotCmd -> executeCommand,
		whenMsg robotAdapterCmd -> executeCommand
		finally repeatPlan
	
	Plan executeCommand resumeLastPlan [
		onMsg robotCmd: robotCmd(X) -> javaRun it.unibo.robotadapter.allRobots.doMove(X);
		onMsg robotAdapterCmd: robotCmd(X,T) -> javaRun it.unibo.robotadapter.allRobots.doMove(X,T)
	]
}

/*
 * ----------------------------------------------------------
 * onecellforward : moves the robot ahead of one cell
 * ----------------------------------------------------------
 */
QActor onecellforward context ctxRobot {
	
	Rules{
		timew(10). //set by moveMsgCmd
		moveTimeInfo(timew(TF),moveWDuration(TD)) :- timew(TF),moveWDuration(TD).
	}
	
	Plan init normal[
	]
	transition stopAfter 600000000
		whenMsg cmdStop -> handleStop,	//first to be checked
		whenMsg collisionDispatch -> init,	// clear collision before starting
		whenMsg moveMsgCmd -> startWork

	Plan startWork[
		onMsg moveMsgCmd: moveMsgCmd(TF) ->
			ReplaceRule timew(_) with timew(TF);
		//SAVE THE CURRENT MESSAGE. the currentMessage is lost when the state changes
		javaOp "storeCurrentMessageForReply()";  //used by replyToCaller
		//[!? timew( T )] println(doMoveForward_timeForForward(T));
		javaRun it.unibo.utils.movePlanUtil.startTimer();
		[ !? timew(T) ] forward robot_adapter -m robotAdapterCmd: robotCmd(w,T)
	] transition
		//transition [ !? timew(T) ] whenTime T -> endMoveForward
		whenTime 1500 -> endMoveForward						//asynch
		whenMsg cmdStop -> handleStop,						//first to be checked
		whenMsg collisionDispatch -> probableFixedObstacle	//NO MOBILE OBSTACLES

	Plan probableFixedObstacle[ 
		printCurrentMessage;
		forward robot_adapter -m robotAdapterCmd: robotCmd(h,0);
		javaRun it.unibo.utils.movePlanUtil.getDuration();
		[ !? moveWDuration(T) ] println(onecellforward_probableFixedObstacle(T));
		selfMsg obstacleNear: obstacleNear
	]
	switchTo consumePendingCollisions

	Plan consumePendingCollisions [
		println("onecellforward_consumePendingCollisions: (a physical sonar should ...)")
	]
	transition
		whenTime 3000 -> handleError
		whenMsg cmdStop -> handleStop,		//first to be checked
		whenMsg collisionDispatch -> consumePendingCollisions,
		whenMsg obstacleNear -> sendAnswerAfterCollision

	Plan sendAnswerAfterCollision[ //obstacle far has duration negative
		println("onecellforward sendAnswerAfterCollision");
		javaOp "ignoreCurrentCaller()"; //set currentMessage = null;
		[ ?? moveWDuration(T) ] //reply to the saved caller
			replyToCaller -m moveMsgCmdObstacle : moveMsgCmdObstacle(moveWDuration(T))
	]
	switchTo init 
	
	Plan endMoveForward[ 
//		forward robot_adapter -m robotAdapterCmd: robotCmd(h,0);
//		javaRun it.unibo.utils.movePlanUtil.getDuration();
//		[ !? moveTimeInfo(TF,TD)] replyToCaller -m moveMsgCmdDone: moveMsgCmdDone(w)
		replyToCaller -m moveMsgCmdDone: moveMsgCmdDone(w)
	]
	switchTo init 

	Plan handleStop[ println("onecellforward: robot STOPPED: no reply to the caller") ]
	Plan handleError[ println("onecellforward ERROR") ]
}

QActor robot_planner context ctxRobot {
	
	Rules {
		timew(1500).
		timeTurn(900).
	}
	
	Plan init normal [
		
	] switchTo doWork
	
	Plan doWork [
		
	] transition
		stopAfter 6000000
		whenMsg robotCmd -> executeCommand
	
	Plan executeCommand [
		//SAVE THE CURRENT MESSAGE. the currentMessage is lost when the state changes
		javaOp "storeCurrentMessageForReply()";  //used by replyToCaller
		onMsg robotCmd: robotCmd(a) -> {
			[ !? timeTurn(T) ] forward robot_adapter -m robotAdapterCmd: robotCmd(a,T);
			selfMsg waitMoveCompleted: waitMoveCompleted
		};
		onMsg robotCmd: robotCmd(d) -> {
			[ !? timeTurn(T) ] forward robot_adapter -m robotAdapterCmd: robotCmd(d,T);
			selfMsg waitMoveCompleted: waitMoveCompleted
		};
		onMsg robotCmd: robotCmd(w) -> {
			//attempt to move
			[ !? timew(T) ] forward onecellforward -m moveMsgCmd : moveMsgCmd(T);
			selfMsg waitMoveCompleted: waitMoveCompleted
		}
	] transition
		whenTime 100 -> doWork
		whenMsg waitMoveCompleted -> waitMoveComletedAnswer

	Plan waitMoveComletedAnswer [
	] transition
		stopAfter 6000000
		whenMsg moveMsgCmdDone -> receivedMoveCompletedAnswer,
		whenMsg moveMsgCmdObstacle -> receivedMoveCompletedAnswer
	
	Plan receivedMoveCompletedAnswer [
		onMsg moveMsgCmdDone: moveMsgCmdDone(X) -> 
			replyToCaller -m moveMsgCmdDone: moveMsgCmdDone(X);
		onMsg moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T)) ->
			forward robot_adapter -m robotAdapterCmd: robotCmd(s,T);				//BACK (to COMPENSATE)
		onMsg moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T)) ->
			replyToCaller -m moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T))
	] switchTo doWork

}

QActor robot_discovery_mind context ctxRobot {
	
	Rules {
		environment(notok).

		// PLANNER
		curPos(0,0,down).
		numOfExplorations(3). 	
		curGoal(0,0).   
	 	
		continueForward(T) :-  timew(T),  inc(repeatForward,1,R), getVal( nstep,N ),
						output(continueForward( R,N,T )), eval( lt, R, N ).						 	 
	 	continueExplore(V)  :- numOfExplorations(MAX), inc(curNumExplore,1,V), 
	 			output(continueExplore( V,MAX )),eval( le, V, MAX ),
	 			replaceRule( curGoal(_,_), curGoal(V,V) ).	
	 	continueExplore(V) :- removeeRule( curGoal(_,_) ).			
	 	 
		//----------------------------------
		eval( eq, X, X ).		//since we have syntax limitations
		doTheMove(M) :-  //moveDone does not exist: we can goon
			move(M1), !, //M1 is the first move to do
			eval(eq,M,M1), !,
	 		doTheFirstMove(M). 
		    
		doTheFirstMove(w) :- retract( move(w) ),!.   			
		doTheFirstMove(a) :- retract( move(a) ),!.
		doTheFirstMove(d) :- retract( move(d) ),!.
		
		foundBomb :- bomb(X,Y).
	}
	
	Plan init normal [
		// Planner
		javaRun it.unibo.planning.planUtil.initAI()
	] switchTo home
	
	/*
	 * -----------------------------------------------------------------------------
	 * Evaluate environment conditions before starting
	 * -----------------------------------------------------------------------------
	 */
	Plan home [
		[ !? foundBomb ] forward console -m robotHome: robotHome
     		else {
     			[ !? environment(X) ] println(environment(X));
     			[ !? environment(ok) ] javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("discovery-home")
     				else javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("environment-notok")
 			}
	] transition
		whenTime 1000 -> home
		whenEvent environment: environment(E) do
			demo replaceRule(environment(X), environment(E)),
		whenMsg cmdExplore -> checkTemperatureAndExplore							// R-explore & R-TempOk
		finally repeatPlan
	
	Plan checkTemperatureAndExplore [												// R-TempOk
		[ !? environment(ok) ] selfMsg cmdExplore: cmdExplore
	] transition
		whenTime 100 -> home
		whenMsg cmdExplore -> startExploration
	
	/*
	 * -----------------------------------------------------------------------------
	 * Exploration business logic
	 * -----------------------------------------------------------------------------
	 */
	Plan startExploration [
		// Planner
		demo assign(curNumExplore, 0); 
  		javaRun it.unibo.planning.planUtil.cleanQa();
		demo assign(nstep, 0)
	] switchTo goToExploration
	
	Plan goToExploration [
		println("STATE[goToExploration] ...");
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("discovery-exploring");
		forward robot_adapter -m robotCmd: robotCmd(blinkStart)						// R-blinkLed (start)
	] switchTo exploreStep

	Plan resumeExploration [
		println("STATE[resumeExploration] ...");
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("discovery-exploring");
		forward robot_adapter -m robotCmd: robotCmd(blinkStart)						// R-blinkLed (start)
	] switchTo doActions
	
	Plan goToHandleBag [
		println("STATE[goToHandleBag] ...");
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("discovery-obstacle");
		// Handle obstacle
		forward robot_adapter -m robotCmd: robotCmd(blinkStop);						// R-blinkLed (stop)
		
		javaRun it.unibo.utils.photoUtil.takePhotoAndSendToConsole();				// R-takePhoto &  R-sendPhoto
		
     	[ !? curPos(X,Y,D)  ] println( handleFixedObstacleCases_1(X,Y,D) );
		// Update map
     	javaRun it.unibo.planning.planUtil.markCellAsObstacle();
     	javaRun it.unibo.planning.planUtil.showMap();
     	javaRun it.unibo.utils.updateStateOnConsole.updateMap()
	] switchTo handleBag
	
	Plan handleBag [																// R-stopAtBag
		println("STATE[handleBag] waiting for console command ...")
	] transition
		stopAfter 6000000
		whenMsg cmdStop -> handleBag,
		whenMsg cmdGoHome -> backHomeAfterBomb,										// R-backHome
		whenMsg cmdExplore -> resumeExplorationAfterBag								// R-continueExplore
	
	Plan resumeExplorationAfterBag [
		println("STATE[resumeExplorationAfterBag] ...");
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("discovery-exploring");
     	// Update plan to continue exploration
   	    [ !? curGoal(N,N)  ]  javaRun it.unibo.planning.planUtil.setGoal(N,N) ;
   	    [ !? curGoal(N,N)  ]  javaRun it.unibo.planning.planUtil.doPlan()
	] switchTo doActions
	
	Plan backHomeAfterBomb [
		println("STATE[backHomeAfterBomb] ...");
		// Update map
     	javaRun it.unibo.planning.planUtil.markCellAsBomb()
	] switchTo goToHome
	
	Plan goToIdle [
		println("STATE[goToIdle] ...");
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("discovery-idle");
		forward robot_adapter -m robotCmd: robotCmd(blinkStop)						// R-blinkLed (stop)
	] switchTo idle
	
	Plan idle [
		
	] transition
		stopAfter 6000000
		whenMsg cmdExplore -> resumeExploration,									// R-continueExplore
		whenMsg cmdGoHome -> goToHome												// R-backHome
	
	Plan goToHome [
		println("STATE[goToHome] ...");
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("discovery-returning");
		forward robot_adapter -m robotCmd: robotCmd(blinkStart)						// R-blinkLed (start)
	] switchTo backToHome
	
	/*
	 * PLANNER
	 */
	Plan doActions[
		[ !? move(M) ] println( doActions_doingTheMove(M) );
		[ not !? move(M) ] selfMsg endAction : endAction ;
     	[ !? move(M) ] selfMsg waitMoveCompleted: waitMoveCompleted;
     	[ !? doTheMove(M) ] forward robot_planner -m robotCmd: robotCmd(M)
	] transition
		stopAfter 6000000
		whenMsg cmdStop -> goToIdle,   //first to be checked
		whenMsg cmdExplore -> goToExploration,
		whenMsg cmdGoHome -> goToHome,
		whenMsg waitMoveCompleted -> waitMoveCompletedAnswer,
 	    whenMsg endAction -> backToHome  //all actions done
 	    finally repeatPlan

	Plan waitMoveCompletedAnswer [
		
	] transition
		stopAfter 6000000
		whenMsg moveMsgCmdObstacle -> goToHandleBag,
		whenMsg cmdStop -> goToIdle,
		whenMsg moveMsgCmdDone -> handleCmdDone

	Plan handleCmdDone [
		printCurrentMessage;
		onMsg moveMsgCmdDone: moveMsgCmdDone(X) -> 
			javaRun it.unibo.planning.planUtil.doMove(X); //update the map
		javaRun it.unibo.planning.planUtil.showMap();
     	javaRun it.unibo.utils.updateStateOnConsole.updateMap()
	] transition
		whenTime 100 -> doActions
		whenMsg cmdStop -> goToIdle
 	
 	Plan backToHome  [
 		[ !? curPos(0,0,D)  ]{
 			forward robot_adapter -m robotCmd: robotCmd(blinkStop);					// R-blinkLed (stop)
 			println("AT HOME");	
 			javaRun it.unibo.planning.planUtil.showMap();
     		javaRun it.unibo.utils.updateStateOnConsole.updateMap();
 			[ !? foundBomb ] selfMsg robotHomeAfterBomb: robotHomeAfterBomb
 				else selfMsg endAction: endAction
 		 }
 		else{
 	  		javaRun it.unibo.planning.planUtil.setGoal("0","0");
	  		[ !? curPos(X,Y,D)  ]  println( backToHome(X,Y,D) );
	  		javaRun it.unibo.planning.planUtil.doPlan()
  		}
 	] transition
 		whenTime 100 -> doActions
 		whenMsg endAction -> exploreStep,
 		whenMsg robotHomeAfterBomb -> home
 	        
 	Plan exploreStep[
 		println(state(exploreStep));
 		[ !? curPos(X,Y,D) ]  println( exploreStep(X,Y,D) );
   		[ !? continueExplore(N) ] {
			javaRun it.unibo.planning.planUtil.extendSpaceToexplore( );
 			[!? getVal(curNumExplore,E)] javaRun it.unibo.planning.planUtil.setGoal(E,E); 
			javaRun it.unibo.planning.planUtil.doPlan() //;javaOp "debugStep()"
		} else selfMsg endAction : endAction  
 	]    
 	transition whenTime 1000 -> doActions
 		whenMsg endAction -> exploreUncovered //: endAction do println("bye")
          
    Plan exploreUncovered[
    	[ !? curPos(X,Y,D)  ]  println( exploreUncovered(X,Y,D) );
    	javaRun it.unibo.planning.planUtil.showMap();
     	javaRun it.unibo.utils.updateStateOnConsole.updateMap();
    	javaRun it.unibo.planning.planUtil.findNextCellUncovered( );
    	[ !? uncovered(X,Y )] println( uncovered(X,Y ) );
    	[ !? uncovered(X,Y )] javaRun it.unibo.planning.planUtil.setGoal(X,Y); 
    	[ ?? uncovered(X,Y )] javaRun it.unibo.planning.planUtil.doPlan()  
    	else selfMsg endAction : endAction
    ]
 	transition whenTime 100 -> doActions
 		whenMsg endAction : endAction do println("bye")

	Plan handleError[ println("mind ERROR") ]
}

QActor robot_retriever_mind context ctxRobot {
	
	Rules {
		environment(notok).
		
		eval( eq, X, X ).		//since we have syntax limitations
		doTheMove(M) :-  //moveDone does not exist: we can goon
			move(M1), !, //M1 is the first move to do
			eval(eq,M,M1), !,
	 		doTheFirstMove(M). 
		    
		doTheFirstMove(w) :- retract( move(w) ),!.   			
		doTheFirstMove(a) :- retract( move(a) ),!.
		doTheFirstMove(d) :- retract( move(d) ),!.
		
		homeReady :- curPos(0,0,D), bomb(_,_).
		bombInRoom :- bomb(_,_).
		
		nearBomb :- curPos(X,Y,_), eval(plus,X,1,R), bomb(R,Y).
		nearBomb :- curPos(X,Y,_), eval(minus,X,1,R), bomb(R,Y).
		nearBomb :- curPos(X,Y,_), eval(plus,Y,1,R), bomb(X,R).
		nearBomb :- curPos(X,Y,_), eval(minus,Y,1,R), bomb(X,R).
	}
	
	Plan init normal [
		// Planner
		javaRun it.unibo.planning.planUtil.initAI()
	] switchTo home
	
	Plan home [
		
	] transition
		stopAfter 6000000
		whenEvent environment: environment(E) do
			demo replaceRule(environment(X), environment(E)),
		whenMsg map: map(M) do javaRun it.unibo.utils.updateStateOnRobot.loadMap(M),
		whenMsg cmdReachBomb -> checkTemperatureAndRetrieve							// R-reachBag & R-TempOk
		finally repeatPlan
	
	Plan checkTemperatureAndRetrieve [												// R-TempOk
		[ !? environment(ok) ] selfMsg cmdReachBomb: cmdReachBomb
	] transition
		whenTime 100 -> home
		whenMsg cmdReachBomb -> goToReachBomb
	
	/*
	 * -----------------------------------------------------------------------------
	 * Retrieval business logic
	 * -----------------------------------------------------------------------------
	 */
	Plan goToReachBomb [
		println("STATE[goToReachBomb] ...");
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("retriever-retrieving");
  		[ !? bomb(X,Y)  ] javaRun it.unibo.planning.planUtil.setGoal(X,Y);
  		javaRun it.unibo.planning.planUtil.doPlan()
	] transition
		whenTime 1000 -> doActions

	Plan goToIdle [
		println("RETRIEVER_MIND[goToIdle] ...");
     	[ !? nearBomb ] {
     		javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("retriever-retrieving");
     		delay 3000;
     		removeRule bomb(_,_);
     		selfMsg endAction: endAction
     	} else {
     		[ !? bombInRoom ] {
		     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("retriever-idle");
				forward robot_adapter -m robotCmd: robotCmd(blinkStop)					// R-blinkLed (stop)
     		} else {
		     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("retriever-idle-with-bomb");
				forward robot_adapter -m robotCmd: robotCmd(blinkStop)					// R-blinkLed (stop)
     		}
     	}
	] transition
		whenTime 100 -> idle
		whenMsg endAction -> goToHome
	
	Plan goToHome [
		println("STATE[goToHome] ...");
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("retriever-returning");
		forward robot_adapter -m robotCmd: robotCmd(blinkStart)						// R-blinkLed (start)
	] switchTo backToHome
	
	Plan idle [
		// reach bomb solo se non ha bomba, go home in entrambi
		[ !? bombInRoom ] selfMsg idleWhileRetrieving: idleWhileRetrieving
			else selfMsg idleWhileReturning: idleWhileReturning
	] transition
		stopAfter 6000000
		whenMsg cmdStop -> idle,
		whenMsg idleWhileRetrieving -> idleWhileRetrieving,
		whenMsg idleWhileReturning -> idleWhileReturning
	
	Plan idleWhileRetrieving [
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("retriever-idle-retrieving")
	] transition
		stopAfter 6000000
		whenMsg cmdStop -> idleWhileRetrieving,
		whenMsg cmdReachBomb -> goToReachBomb,
		whenMsg cmdGoHome -> goToHome												// R-backHome
	
	Plan idleWhileReturning [
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("retriever-idle-returning")
	] transition
		stopAfter 6000000
		whenMsg cmdStop -> idleWhileReturning,
		whenMsg cmdGoHome -> goToHome												// R-backHome
	
	/*
	 * PLANNER
	 */
	Plan doActions[
		[ !? move(M) ] println( doActions_doingTheMove(M) );
		[ not !? move(M) ] selfMsg endAction : endAction ;
     	[ !? move(M) ] selfMsg waitMoveCompleted: waitMoveCompleted;
     	[ !? doTheMove(M) ] forward robot_planner -m robotCmd: robotCmd(M)
	] transition
		stopAfter 6000000
		whenMsg cmdStop -> goToIdle,   //first to be checked
		whenMsg waitMoveCompleted -> waitMoveCompletedAnswer,
 	    whenMsg endAction -> backToHome  //all actions done
 	    finally repeatPlan

	Plan waitMoveCompletedAnswer [
		
	] transition
		stopAfter 6000000
		whenMsg moveMsgCmdObstacle -> goToIdle,
		whenMsg cmdStop -> goToIdle,
		whenMsg moveMsgCmdDone -> handleCmdDone

	Plan handleCmdDone [
		printCurrentMessage;
		onMsg moveMsgCmdDone: moveMsgCmdDone(X) -> 
			javaRun it.unibo.planning.planUtil.doMove(X); //update the map
		javaRun it.unibo.planning.planUtil.showMap();
     	javaRun it.unibo.utils.updateStateOnConsole.updateMap()
	] transition
		whenTime 100 -> doActions
		whenMsg cmdStop -> goToIdle
 	
 	Plan backToHome  [
 		[ !? curPos(0,0,D)  ]{
 			forward robot_adapter -m robotCmd: robotCmd(blinkStop);					// R-blinkLed (stop)
 			println("AT HOME");	
 			javaRun it.unibo.planning.planUtil.showMap();
     		javaRun it.unibo.utils.updateStateOnConsole.updateMap();
 			[ !? homeReady ] selfMsg cmdGoHome: cmdGoHome	// Senza bomba
 				else selfMsg endAction: endAction			// Con bomba
 		 }
 		else{
 	  		javaRun it.unibo.planning.planUtil.setGoal("0","0");
	  		[ !? curPos(X,Y,D)  ]  println( backToHome(X,Y,D) );
	  		javaRun it.unibo.planning.planUtil.doPlan()
  		}
 	] transition
 		whenTime 100 -> doActions
 		whenMsg endAction -> terminate,
 		whenMsg cmdGoHome -> home,
 		whenMsg robotHomeAfterBomb -> home

	Plan terminate [
		println("STATE[terminate] retriever home!");
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("terminating")
	]

	Plan handleError[ println("mind ERROR") ]

}

QActor console context ctxConsole {
	
	Plan init normal [
		delay 2000;
//		connectAsSubscriber "unibo/frontendUserCmd";
		javaRun it.unibo.utils.mqttUtil.connectAndSubscribe("unibo/frontendUserCmd");
		println("Console init")
	] switchTo doWork
	
	Plan doWork [
		
	] transition
		stopAfter 6000000
		whenEvent frontendUserCmd -> adaptCommand,
		whenEvent environment -> storeEnvironment,
		whenMsg stateUpdate -> updateView,											// R-consoleUpdate
		whenMsg bag -> handlePhoto
		finally repeatPlan
	
	Plan adaptCommand resumeLastPlan [
		printCurrentEvent;
		onEvent frontendUserCmd: frontendUserCmd(cmd(explore)) -> forward robot_discovery_mind -m cmdExplore: cmdExplore;
		onEvent frontendUserCmd: frontendUserCmd(cmd(retrieve)) -> forward robot_retriever_mind -m cmdReachBomb: cmdReachBomb;
		onEvent frontendUserCmd: frontendUserCmd(cmd(halt)) -> forward robot_discovery_mind -m cmdStop: cmdStop;
		onEvent frontendUserCmd: frontendUserCmd(cmd(home)) -> forward robot_discovery_mind -m cmdGoHome: cmdGoHome;
		onEvent frontendUserCmd: frontendUserCmd(bagStatus(bomb)) -> selfMsg bagStatus: bagStatus(bomb);
		onEvent frontendUserCmd: frontendUserCmd(bagStatus(bag)) -> selfMsg bagStatus: bagStatus(bag)
	]
	
	Plan storeEnvironment resumeLastPlan [
		onEvent environment: environment(notok) ->
			selfMsg stateUpdate: state(messageDanger, "Environment adverse - temperature too hot!");
		onEvent environment: environment(ok) ->
			selfMsg stateUpdate: state(messageInfo, "Environment condition is safe.")
	]
	
	Plan handlePhoto [
		onMsg bag: bag(picture(X)) -> selfMsg stateUpdate: state(picture, X);
		onMsg bag: bag(picture(X)) -> ReplaceRule picture(_) with picture(X)
	] transition
		stopAfter 6000000
		whenMsg stateUpdate -> updateView,
		whenMsg bagStatus -> handleBagStatus,
		whenEvent frontendUserCmd -> adaptCommand
		finally repeatPlan
	
	Plan handleBagStatus [
		onMsg bagStatus: bagStatus(bomb) -> {
			[ !? picture(X) ] javaRun it.unibo.utils.photoUtil.storePhoto(X);		// R-storePhoto
			forward robot_discovery_mind -m cmdGoHome: cmdGoHome;					// R-backHomeSinceBomb
			selfMsg alert: alert													// R-alert
		};
		onMsg bagStatus: bagStatus(bag) ->
			forward robot_discovery_mind -m cmdExplore: cmdExplore					// R-continueExploreAfterPhoto
	] transition
		whenTime 3000 -> doWork
		whenMsg alert -> handleAlert
	
	Plan handleAlert [
		
	] transition
		stopAfter 6000000
		whenMsg robotHome -> startRetrieval,										// R-whaitForHome & R-reachBag
		whenMsg stateUpdate -> updateView
		finally repeatPlan
	
	Plan startRetrieval [
		// Send map
		javaRun it.unibo.utils.updateStateOnRobot.sendMap();
     	javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("retriever-home")
	] transition
		whenTime 1000 -> doWork
	
	Plan updateView resumeLastPlan [
		onMsg stateUpdate: state(T,P) -> javaRun it.unibo.utils.updateStateOnConsole.receivedUpdateState(T,P)
	]
}